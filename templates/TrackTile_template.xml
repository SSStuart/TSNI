<?xml version="1.0" encoding="utf-8"?>
<cRecordSet xmlns:d="http://www.kuju.com/TnT/2003/Delta" d:version="1.0" d:id="200859560">
	<Record>
		{% for ruban in rubans %}<Network-cNetworkRibbonUnstreamed-cCurveContainerUnstreamed d:id="{{ ruban.id }}">
			<RibbonID>
				<Network-cNetworkRibbon-cCurveContainer-cID>
					<RibbonID>
						<cGUID>
							<UUID>
								<e d:type="sUInt64">{{ ruban.GUIDs[0] }}</e>
								<e d:type="sUInt64">{{ ruban.GUIDs[1] }}</e>
							</UUID>
							<DevString d:type="cDeltaString">{{ ruban.GUIDs[2] }}</DevString>
						</cGUID>
					</RibbonID>
					<NetworkTypeID>
						<cGUID>
							<UUID>
								<e d:type="sUInt64">4902272991866588709</e>
								<e d:type="sUInt64">14017088955258244018</e>
							</UUID>
							<DevString d:type="cDeltaString">10330e25-5f50-4408-b20b-389b23b486c2</DevString>
						</cGUID>
					</NetworkTypeID>
				</Network-cNetworkRibbon-cCurveContainer-cID>
			</RibbonID>
			<Curve>
				{% for curve in ruban.curves %}{% if ruban.sensCourbe == "ALIGNEMENT" %}<cCurveStraight d:id="{{ curve.id }}">
					<Length d:type="sFloat32" d:alt_encoding="0000000000000000" d:precision="string">{{	curve.longueur }}</Length>
					<StartPos>
						<cFarVector2>
							<X>
								<cFarCoordinate>
									<RouteCoordinate>
										<cRouteCoordinate>
											<Distance d:type="sInt32">{{ curve.tileX }}</Distance>
										</cRouteCoordinate>
									</RouteCoordinate>
									<TileCoordinate>
										<cTileCoordinate>
											<Distance d:type="sFloat32"
												d:alt_encoding="0000000000000000"
												d:precision="string">{{ curve.coordRelX }}</Distance>
										</cTileCoordinate>
									</TileCoordinate>
								</cFarCoordinate>
							</X>
							<Z>
								<cFarCoordinate>
									<RouteCoordinate>
										<cRouteCoordinate>
											<Distance d:type="sInt32">{{ curve.tileZ }}</Distance>
										</cRouteCoordinate>
									</RouteCoordinate>
									<TileCoordinate>
										<cTileCoordinate>
											<Distance d:type="sFloat32"
												d:alt_encoding="0000000000000000"
												d:precision="string">{{ curve.coordRelZ }}</Distance>
										</cTileCoordinate>
									</TileCoordinate>
								</cFarCoordinate>
							</Z>
						</cFarVector2>
					</StartPos>
					<StartTangent d:numElements="2" d:elementType="sFloat32" d:precision="string">{{ curve.angle.cos }} {{ curve.angle.sin }}</StartTangent>
				</cCurveStraight>
				{% else %}
				<cCurveArc d:id="{{ curve.id }}">
					<Curvature d:type="sFloat32" d:alt_encoding="0000000000000000" d:precision="string">{{ 1 / ruban.rayonCourbe }}</Curvature>
					<Length d:type="sFloat32" d:alt_encoding="0000000000000000" d:precision="string">{{ curve.longueur }}</Length>
					<StartPos>
						<cFarVector2>
							<X>
								<cFarCoordinate>
									<RouteCoordinate>
										<cRouteCoordinate>
											<Distance d:type="sInt32">{{ curve.tileX }}</Distance>
										</cRouteCoordinate>
									</RouteCoordinate>
									<TileCoordinate>
										<cTileCoordinate>
											<Distance d:type="sFloat32" d:alt_encoding="0000000000000000" d:precision="string">{{ curve.coordRelX }}</Distance>
										</cTileCoordinate>
									</TileCoordinate>
								</cFarCoordinate>
							</X>
							<Z>
								<cFarCoordinate>
									<RouteCoordinate>
										<cRouteCoordinate>
											<Distance d:type="sInt32">{{ curve.tileZ }}</Distance>
										</cRouteCoordinate>
									</RouteCoordinate>
									<TileCoordinate>
										<cTileCoordinate>
											<Distance d:type="sFloat32" d:alt_encoding="0000000000000000" d:precision="string">{{ curve.coordRelZ }}</Distance>
										</cTileCoordinate>
									</TileCoordinate>
								</cFarCoordinate>
							</Z>
						</cFarVector2>
					</StartPos>
					<StartTangent d:numElements="2" d:elementType="sFloat32" d:precision="string">{{ curve.angle.cos }} {{ curve.angle.sin }}</StartTangent>
					<CurveSign d:type="sFloat32" d:alt_encoding="0000000000000000" d:precision="string">{{ (ruban.sensCourbe == "GAUCHE" ? '-1' : '1') }}</CurveSign>
				</cCurveArc>
			{% endif %}{% endfor %}</Curve>
		</Network-cNetworkRibbonUnstreamed-cCurveContainerUnstreamed>
	{% endfor %}</Record>
</cRecordSet>